#!/bin/bash

set -eux

### --start_docs
## Prepare images for deploying the overcloud
## ==========================================

## Prepare Your Environment
## ------------------------

## * Source in the undercloud credentials.
## ::

source /home/stack/stackrc

{% if introspection|bool %}

## * Introspect hardware attributes of nodes.
## ::

openstack baremetal introspection bulk start

{% endif %}

{% if introspect_with_retry|bool %}

## * Introspect all manageable nodes with a caller provided timeout.
##   then move all nodes that power off after a successful introspection
##   back to available so we don't introspect them again. This is useful
##   for large deployments (think 10+ nodes) where bulk introspection
##   can be troublesome. It's also useful in environments where connection
##   problems may spuriously fail a deployment. Related-Bug: #1651127
## ::
introspect()
{
    clean 15m

    for node in `openstack baremetal node list -f json | jq -r '.[]|select(.["Provisioning State"] == "manageable")| .["UUID"]'`; do
        openstack baremetal introspection start $node
        sleep 10s
    done

    manageable_count=$(openstack baremetal node list -f json | jq -r '.[]|select(.["Provisioning State"] == "manageable")| .["UUID"]' | wc -l)
    on_count=$(openstack baremetal node list -f json|jq -r '.[]| select(.["Power State"] == "power on")| .["UUID"]' | wc -l)
    while [ $on_count -eq 0 ] && [ $manageable_count -gt 0 ]; do
        manageable_count=$(openstack baremetal node list -f json | jq -r '.[]|select(.["Provisioning State"] == "manageable")| .["UUID"]' )
        on_count=$(openstack baremetal node list -f json|jq -r '.[]|select(.[\"Power State\"] == \"power on\")| .[\"UUID\"]' | wc -l)
        sleep 30
    done

    set +e
    timeout $1 bash -c -- 'source $HOME/stackrc; \
                            on_count=$(openstack baremetal node list -f json |jq -r ".[]| select(.[\"Power State\"] == \"power on\")| .[\"UUID\"]" | wc -l) ; \
                            while [ $on_count -gt 0 ]; do \
                                sleep 30s; \
                                on_count=$(openstack baremetal node list -f json |jq -r ".[]| select(.[\"Power State\"] == \"power on\")| .[\"UUID\"]" | wc -l) ; \
                            done'
    set -e

    for node in `openstack baremetal node list -f json | jq -r '.[]| select(.["Power State"] == "power off")| select(.["Provisioning State"] == "manageable")|.["UUID"]'`; do
        openstack baremetal node provide $node
    done
}


# Corrects hardware cleaning failures
clean()
{

    for node in `openstack baremetal node list -f json | jq -r '.[]| select(.["Power State"] == "power off")| select(.["Provisioning State"] == "manageable")|.["UUID"]'`; do
        openstack baremetal node clean $node --clean-steps '[{"interface": "deploy", "step": "erase_devices_metadata"}]'
        sleep 10
    done

    set +e
    timeout $1 bash -c -- 'source $HOME/stackrc; \
                            on_count=$(openstack baremetal node list -f json | jq -r ".[]| select(.[\"Provisioning State\"] == \"clean wait\")| .[\"UUID\"]" | wc -l) ; \
                            while [ $on_count -gt 0 ]; do \
                                sleep 30s; \
                                on_count=$(openstack baremetal node list -f json | jq -r ".[]| select(.[\"Provisioning State\"] == \"clean wait\")| .[\"UUID\"]" | wc -l) ; \
                            done'
    set -e
    # Getting nodes out of clean-wait is a real pain. Check if a longer timeout is justified on your hardware
    # but generally 15m is excessive.
    for node in `openstack baremetal node list -f json | jq -r '.[]| select(.["Provision State"] == "clean failed")|.["UUID"]'`; do
        openstack baremetal node maintenance unset $node
        openstack baremetal node manage $node
        sleep 10
        openstack baremetal node clean $node --clean-steps '[{"interface": "deploy", "step": "erase_devices_metadata"}]'
    done
    for node in `openstack baremetal node list -f json | jq -r '.[]| select(.["Provision State"] == "clean failed")|.["UUID"]'`; do
        openstack baremetal node maintenance set $node
        openstack baremetal node abort $node
        openstack baremetal node maintenance unset $node
        openstack baremetal node manage $node
        sleep 10
        openstack baremetal node clean $node --clean-steps '[{"interface": "deploy", "step": "erase_devices_metadata"}]'
    done
    # make sure nodes go from clean -> clean_wait
    sleep 60
    set +e
    timeout $1 bash -c -- 'source $HOME/stackrc; \
                            on_count=$(openstack baremetal node list -f json | jq -r ".[]| select(.[\"Provisioning State\"] == \"clean wait\")| .[\"UUID\"]" | wc -l) ; \
                            while [ $on_count -gt 0 ]; do \
                                sleep 30s; \
                                on_count=$(openstack baremetal node list -f json | jq -r ".[]| select(.[\"Provisioning State\"] == \"clean wait\")| .[\"UUID\"]" | wc -l) ; \
                            done'
    set -e

    for node in `openstack baremetal node list -f json | jq -r '.[]| select(.[\"Provisioning State\"] == \"clean failed\")| .[\"UUID\"]'`; do
        openstack baremetal node maintenance unset $node
        openstack baremetal node manage $node
        sleep 10
    done
    for node in `openstack baremetal node list -f json | jq -r '.[]| select(.[\"Provisioning State\"] == \"clean wait\")| .[\"UUID\"]'`; do
        openstack baremetal node maintenance set $node
        openstack baremetal node abort $node
        openstack baremetal node maintenance unset $node
        openstack baremetal node manage $node
        sleep 10
    done
}



## * Introspect hardware attributes of nodes in a robust manner
##   retrying up to three times on any given node. This should
##   only be used in cases where deployment using bulk introspection
##   has reliability issues.
## ::

for node in `openstack baremetal node list -f json | jq -r '.[]| select(.[\"Provisioning State\"] == \"available\")| .[\"UUID\"]'`; do
    openstack baremetal node manage $node
done

introspect 15m
introspect 15m
introspect 15m

{% endif %}

### --stop_docs
